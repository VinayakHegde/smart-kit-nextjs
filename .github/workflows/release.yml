name: Automated Release to GitHub Packages

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'

env:
  CI: true
  PNPM_CACHE_FOLDER: .pnpm-store

jobs:
  release:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: https://npm.pkg.github.com/
          scope: '@VinayakHegde'
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.9

      - name: Setup pnpm config
        run: pnpm config set store-dir $PNPM_CACHE_FOLDER

      - name: Install dependencies
        run: pnpm install

      # - name: Create .npmrc
      #   run: |
      #     if [ ! -f .npmrc ]; then
      #       echo .npmrc missing. Creating one now. Please review the following link for more information https://docs.gitlab.com/ee/user/packages/npm_registry/index.html#authenticating-with-an-oauth-token;
      #       echo " @vinayakhegde:registry=https://npm.pkg.github.com/" > .npmrc
      #       echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc
      #       echo "auto-install-peers=true" >> .npmrc
      #       echo "node-linker=hoisted" >> .npmrc
      #       cat .npmrc
      #     fi
      - name: Create versions
        uses: changesets/action@v1
        with:
          version: pnpm ci:version
          commit: 'chore: update versions'
          title: 'chore: update versions'
          publish: pnpm publish -r

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and Tag
        id: commit_and_tag
        env:
          HUSKY: 0
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            VERSION=$(node -p "require('./package.json').version")
            git add .
            git commit -m "chore: release version $VERSION [skip ci]"
            git tag v$VERSION
            git push origin main --tags
          else
            echo "No changes to commit"
          fi
